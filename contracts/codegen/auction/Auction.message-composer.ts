/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.35.3.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { Coin } from "@cosmjs/amino";
import { MsgExecuteContractEncodeObject } from "@cosmjs/cosmwasm-stargate";
import { MsgExecuteContract } from "cosmjs-types/cosmwasm/wasm/v1/tx";
import { toUtf8 } from "@cosmjs/encoding";
import { Decimal, Addr, Config, Uint128, DebtAuction, RepayPosition, UserInfo, AuctionRecipient, ExecuteMsg, AssetInfo, Asset, UpdateConfig, FeeAuction, InstantiateMsg, QueryMsg } from "./Auction.types";
export interface AuctionMsg {
  contractAddress: string;
  sender: string;
  startAuction: ({
    auctionAsset,
    repaymentPositionInfo,
    sendTo
  }: {
    auctionAsset: Asset;
    repaymentPositionInfo?: UserInfo;
    sendTo?: string;
  }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
  swapForMBRN: (_funds?: Coin[]) => MsgExecuteContractEncodeObject;
  swapForFee: ({
    auctionAsset
  }: {
    auctionAsset: AssetInfo;
  }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
  removeAuction: (_funds?: Coin[]) => MsgExecuteContractEncodeObject;
  updateConfig: ({
    cdtDenom,
    desiredAsset,
    discountIncrease,
    discountIncreaseTimeframe,
    governanceContract,
    initialDiscount,
    mbrnDenom,
    oracleContract,
    osmosisProxy,
    owner,
    positionsContract,
    sendToStakers,
    stakingContract,
    twapTimeframe
  }: {
    cdtDenom?: string;
    desiredAsset?: string;
    discountIncrease?: Decimal;
    discountIncreaseTimeframe?: number;
    governanceContract?: string;
    initialDiscount?: Decimal;
    mbrnDenom?: string;
    oracleContract?: string;
    osmosisProxy?: string;
    owner?: string;
    positionsContract?: string;
    sendToStakers?: boolean;
    stakingContract?: string;
    twapTimeframe?: number;
  }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
}
export class AuctionMsgComposer implements AuctionMsg {
  sender: string;
  contractAddress: string;

  constructor(sender: string, contractAddress: string) {
    this.sender = sender;
    this.contractAddress = contractAddress;
    this.startAuction = this.startAuction.bind(this);
    this.swapForMBRN = this.swapForMBRN.bind(this);
    this.swapForFee = this.swapForFee.bind(this);
    this.removeAuction = this.removeAuction.bind(this);
    this.updateConfig = this.updateConfig.bind(this);
  }

  startAuction = ({
    auctionAsset,
    repaymentPositionInfo,
    sendTo
  }: {
    auctionAsset: Asset;
    repaymentPositionInfo?: UserInfo;
    sendTo?: string;
  }, _funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          start_auction: {
            auction_asset: auctionAsset,
            repayment_position_info: repaymentPositionInfo,
            send_to: sendTo
          }
        })),
        funds: _funds
      })
    };
  };
  swapForMBRN = (_funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          swap_for_m_b_r_n: {}
        })),
        funds: _funds
      })
    };
  };
  swapForFee = ({
    auctionAsset
  }: {
    auctionAsset: AssetInfo;
  }, _funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          swap_for_fee: {
            auction_asset: auctionAsset
          }
        })),
        funds: _funds
      })
    };
  };
  removeAuction = (_funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          remove_auction: {}
        })),
        funds: _funds
      })
    };
  };
  updateConfig = ({
    cdtDenom,
    desiredAsset,
    discountIncrease,
    discountIncreaseTimeframe,
    governanceContract,
    initialDiscount,
    mbrnDenom,
    oracleContract,
    osmosisProxy,
    owner,
    positionsContract,
    sendToStakers,
    stakingContract,
    twapTimeframe
  }: {
    cdtDenom?: string;
    desiredAsset?: string;
    discountIncrease?: Decimal;
    discountIncreaseTimeframe?: number;
    governanceContract?: string;
    initialDiscount?: Decimal;
    mbrnDenom?: string;
    oracleContract?: string;
    osmosisProxy?: string;
    owner?: string;
    positionsContract?: string;
    sendToStakers?: boolean;
    stakingContract?: string;
    twapTimeframe?: number;
  }, _funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          update_config: {
            cdt_denom: cdtDenom,
            desired_asset: desiredAsset,
            discount_increase: discountIncrease,
            discount_increase_timeframe: discountIncreaseTimeframe,
            governance_contract: governanceContract,
            initial_discount: initialDiscount,
            mbrn_denom: mbrnDenom,
            oracle_contract: oracleContract,
            osmosis_proxy: osmosisProxy,
            owner,
            positions_contract: positionsContract,
            send_to_stakers: sendToStakers,
            staking_contract: stakingContract,
            twap_timeframe: twapTimeframe
          }
        })),
        funds: _funds
      })
    };
  };
}