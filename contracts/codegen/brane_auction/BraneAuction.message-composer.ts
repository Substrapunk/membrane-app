/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.35.3.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { MsgExecuteContractEncodeObject } from "@cosmjs/cosmwasm-stargate";
import { MsgExecuteContract } from "cosmjs-types/cosmwasm/wasm/v1/tx";
import { toUtf8 } from "@cosmjs/encoding";
import { Addr, Auction, Bid, SubmissionItem, SubmissionInfo, Uint128, BidAssetAuction, Coin, Decimal, Config, ExecuteMsg, Timestamp, Uint64, InstantiateMsg, CollectionParams, CollectionInfoForRoyaltyInfoResponse, RoyaltyInfoResponse, PendingAuctionResponse, QueryMsg, SubmissionsResponse, Votes } from "./BraneAuction.types";
export interface BraneAuctionMsg {
  contractAddress: string;
  sender: string;
  submitNft: ({
    proceedRecipient,
    tokenUri
  }: {
    proceedRecipient: string;
    tokenUri: string;
  }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
  voteToCurate: ({
    submissionIds
  }: {
    submissionIds: number[];
  }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
  bidForNft: (_funds?: Coin[]) => MsgExecuteContractEncodeObject;
  bidForAssets: (_funds?: Coin[]) => MsgExecuteContractEncodeObject;
  concludeAuction: (_funds?: Coin[]) => MsgExecuteContractEncodeObject;
  updateConfig: ({
    auctionPeriod,
    bidDenom,
    curationThreshold,
    freeVoteAddr,
    incentiveBidPercent,
    incentiveDenom,
    minimumOutbid,
    mintCost,
    owner,
    submissionCost,
    submissionLimit,
    submissionVotePeriod
  }: {
    auctionPeriod?: number;
    bidDenom?: string;
    curationThreshold?: Decimal;
    freeVoteAddr?: string;
    incentiveBidPercent?: Decimal;
    incentiveDenom?: string;
    minimumOutbid?: Decimal;
    mintCost?: number;
    owner?: string;
    submissionCost?: number;
    submissionLimit?: number;
    submissionVotePeriod?: number;
  }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
}
export class BraneAuctionMsgComposer implements BraneAuctionMsg {
  sender: string;
  contractAddress: string;

  constructor(sender: string, contractAddress: string) {
    this.sender = sender;
    this.contractAddress = contractAddress;
    this.submitNft = this.submitNft.bind(this);
    this.voteToCurate = this.voteToCurate.bind(this);
    this.bidForNft = this.bidForNft.bind(this);
    this.bidForAssets = this.bidForAssets.bind(this);
    this.concludeAuction = this.concludeAuction.bind(this);
    this.updateConfig = this.updateConfig.bind(this);
  }

  submitNft = ({
    proceedRecipient,
    tokenUri
  }: {
    proceedRecipient: string;
    tokenUri: string;
  }, _funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          submit_nft: {
            proceed_recipient: proceedRecipient,
            token_uri: tokenUri
          }
        })),
        funds: _funds
      })
    };
  };
  voteToCurate = ({
    submissionIds
  }: {
    submissionIds: number[];
  }, _funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          vote_to_curate: {
            submission_ids: submissionIds
          }
        })),
        funds: _funds
      })
    };
  };
  bidForNft = (_funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          bid_for_nft: {}
        })),
        funds: _funds
      })
    };
  };
  bidForAssets = (_funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          bid_for_assets: {}
        })),
        funds: _funds
      })
    };
  };
  concludeAuction = (_funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          conclude_auction: {}
        })),
        funds: _funds
      })
    };
  };
  updateConfig = ({
    auctionPeriod,
    bidDenom,
    curationThreshold,
    freeVoteAddr,
    incentiveBidPercent,
    incentiveDenom,
    minimumOutbid,
    mintCost,
    owner,
    submissionCost,
    submissionLimit,
    submissionVotePeriod
  }: {
    auctionPeriod?: number;
    bidDenom?: string;
    curationThreshold?: Decimal;
    freeVoteAddr?: string;
    incentiveBidPercent?: Decimal;
    incentiveDenom?: string;
    minimumOutbid?: Decimal;
    mintCost?: number;
    owner?: string;
    submissionCost?: number;
    submissionLimit?: number;
    submissionVotePeriod?: number;
  }, _funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          update_config: {
            auction_period: auctionPeriod,
            bid_denom: bidDenom,
            curation_threshold: curationThreshold,
            free_vote_addr: freeVoteAddr,
            incentive_bid_percent: incentiveBidPercent,
            incentive_denom: incentiveDenom,
            minimum_outbid: minimumOutbid,
            mint_cost: mintCost,
            owner,
            submission_cost: submissionCost,
            submission_limit: submissionLimit,
            submission_vote_period: submissionVotePeriod
          }
        })),
        funds: _funds
      })
    };
  };
}