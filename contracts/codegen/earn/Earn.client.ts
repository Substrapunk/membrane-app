/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.35.3.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { CosmWasmClient, SigningCosmWasmClient, ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { Coin, StdFee } from "@cosmjs/amino";
import { Decimal, APRResponse, Addr, Uint128, Config, VaultInfo, ExecuteMsg, InstantiateMsg, QueryMsg } from "./Earn.types";
export interface EarnReadOnlyInterface {
  contractAddress: string;
  config: () => Promise<Config>;
  vaultTokenUnderlying: ({
    vaultTokenAmount
  }: {
    vaultTokenAmount: Uint128;
  }) => Promise<Uint128>;
  aPR: () => Promise<APRResponse>;
}
export class EarnQueryClient implements EarnReadOnlyInterface {
  client: CosmWasmClient;
  contractAddress: string;

  constructor(client: CosmWasmClient, contractAddress: string) {
    this.client = client;
    this.contractAddress = contractAddress;
    this.config = this.config.bind(this);
    this.vaultTokenUnderlying = this.vaultTokenUnderlying.bind(this);
    this.aPR = this.aPR.bind(this);
  }

  config = async (): Promise<Config> => {
    return this.client.queryContractSmart(this.contractAddress, {
      config: {}
    });
  };
  vaultTokenUnderlying = async ({
    vaultTokenAmount
  }: {
    vaultTokenAmount: Uint128;
  }): Promise<Uint128> => {
    return this.client.queryContractSmart(this.contractAddress, {
      vault_token_underlying: {
        vault_token_amount: vaultTokenAmount
      }
    });
  };
  aPR = async (): Promise<APRResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      a_p_r: {}
    });
  };
}
export interface EarnInterface extends EarnReadOnlyInterface {
  contractAddress: string;
  sender: string;
  enterVault: (fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  exitVault: (fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  unloopCDP: ({
    desiredCollateralWithdrawal
  }: {
    desiredCollateralWithdrawal: Uint128;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  loopCDP: (fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  rateAssurance: ({
    exit
  }: {
    exit: boolean;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  updateNonleveragedVaultTokens: (fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
}
export class EarnClient extends EarnQueryClient implements EarnInterface {
  client: SigningCosmWasmClient;
  sender: string;
  contractAddress: string;

  constructor(client: SigningCosmWasmClient, sender: string, contractAddress: string) {
    super(client, contractAddress);
    this.client = client;
    this.sender = sender;
    this.contractAddress = contractAddress;
    this.enterVault = this.enterVault.bind(this);
    this.exitVault = this.exitVault.bind(this);
    this.unloopCDP = this.unloopCDP.bind(this);
    this.loopCDP = this.loopCDP.bind(this);
    this.rateAssurance = this.rateAssurance.bind(this);
    this.updateNonleveragedVaultTokens = this.updateNonleveragedVaultTokens.bind(this);
  }

  enterVault = async (fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      enter_vault: {}
    }, fee, memo, _funds);
  };
  exitVault = async (fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      exit_vault: {}
    }, fee, memo, _funds);
  };
  unloopCDP = async ({
    desiredCollateralWithdrawal
  }: {
    desiredCollateralWithdrawal: Uint128;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      unloop_c_d_p: {
        desired_collateral_withdrawal: desiredCollateralWithdrawal
      }
    }, fee, memo, _funds);
  };
  loopCDP = async (fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      loop_c_d_p: {}
    }, fee, memo, _funds);
  };
  rateAssurance = async ({
    exit
  }: {
    exit: boolean;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      rate_assurance: {
        exit
      }
    }, fee, memo, _funds);
  };
  updateNonleveragedVaultTokens = async (fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      update_nonleveraged_vault_tokens: {}
    }, fee, memo, _funds);
  };
}