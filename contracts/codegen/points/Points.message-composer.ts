/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.35.3.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { MsgExecuteContractEncodeObject } from "@cosmjs/cosmwasm-stargate";
import { MsgExecuteContract } from "cosmjs-types/cosmwasm/wasm/v1/tx";
import { toUtf8 } from "@cosmjs/encoding";
import { Uint128, Uint256, Addr, ClaimCheck, ClaimsResponse, Coin, Decimal, Config, ExecuteMsg, InstantiateMsg, QueryMsg, UserStatsResponse, UserStats } from "./Points.types";
export interface PointsMsg {
  contractAddress: string;
  sender: string;
  updateConfig: ({
    cdtDenom,
    governanceContract,
    liqQueueContract,
    maxMbrnDistribution,
    mbrnPerPoint,
    oracleContract,
    osmosisProxyContract,
    owner,
    pointsPerDollar,
    positionsContract,
    stabilityPoolContract,
    totalMbrnDistribution
  }: {
    cdtDenom?: string;
    governanceContract?: string;
    liqQueueContract?: string;
    maxMbrnDistribution?: Uint128;
    mbrnPerPoint?: Decimal;
    oracleContract?: string;
    osmosisProxyContract?: string;
    owner?: string;
    pointsPerDollar?: Decimal;
    positionsContract?: string;
    stabilityPoolContract?: string;
    totalMbrnDistribution?: Uint128;
  }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
  checkClaims: ({
    cdpRepayment,
    lqClaims,
    spClaims,
    vote
  }: {
    cdpRepayment: boolean;
    lqClaims: boolean;
    spClaims: boolean;
    vote?: number[];
  }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
  givePoints: ({
    cdpRepayment,
    lqClaims,
    spClaims,
    vote
  }: {
    cdpRepayment: boolean;
    lqClaims: boolean;
    spClaims: boolean;
    vote?: number[];
  }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
  liquidate: ({
    positionId,
    positionOwner
  }: {
    positionId: Uint128;
    positionOwner: string;
  }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
  claimMBRN: (_funds?: Coin[]) => MsgExecuteContractEncodeObject;
}
export class PointsMsgComposer implements PointsMsg {
  sender: string;
  contractAddress: string;

  constructor(sender: string, contractAddress: string) {
    this.sender = sender;
    this.contractAddress = contractAddress;
    this.updateConfig = this.updateConfig.bind(this);
    this.checkClaims = this.checkClaims.bind(this);
    this.givePoints = this.givePoints.bind(this);
    this.liquidate = this.liquidate.bind(this);
    this.claimMBRN = this.claimMBRN.bind(this);
  }

  updateConfig = ({
    cdtDenom,
    governanceContract,
    liqQueueContract,
    maxMbrnDistribution,
    mbrnPerPoint,
    oracleContract,
    osmosisProxyContract,
    owner,
    pointsPerDollar,
    positionsContract,
    stabilityPoolContract,
    totalMbrnDistribution
  }: {
    cdtDenom?: string;
    governanceContract?: string;
    liqQueueContract?: string;
    maxMbrnDistribution?: Uint128;
    mbrnPerPoint?: Decimal;
    oracleContract?: string;
    osmosisProxyContract?: string;
    owner?: string;
    pointsPerDollar?: Decimal;
    positionsContract?: string;
    stabilityPoolContract?: string;
    totalMbrnDistribution?: Uint128;
  }, _funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          update_config: {
            cdt_denom: cdtDenom,
            governance_contract: governanceContract,
            liq_queue_contract: liqQueueContract,
            max_mbrn_distribution: maxMbrnDistribution,
            mbrn_per_point: mbrnPerPoint,
            oracle_contract: oracleContract,
            osmosis_proxy_contract: osmosisProxyContract,
            owner,
            points_per_dollar: pointsPerDollar,
            positions_contract: positionsContract,
            stability_pool_contract: stabilityPoolContract,
            total_mbrn_distribution: totalMbrnDistribution
          }
        })),
        funds: _funds
      })
    };
  };
  checkClaims = ({
    cdpRepayment,
    lqClaims,
    spClaims,
    vote
  }: {
    cdpRepayment: boolean;
    lqClaims: boolean;
    spClaims: boolean;
    vote?: number[];
  }, _funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          check_claims: {
            cdp_repayment: cdpRepayment,
            lq_claims: lqClaims,
            sp_claims: spClaims,
            vote
          }
        })),
        funds: _funds
      })
    };
  };
  givePoints = ({
    cdpRepayment,
    lqClaims,
    spClaims,
    vote
  }: {
    cdpRepayment: boolean;
    lqClaims: boolean;
    spClaims: boolean;
    vote?: number[];
  }, _funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          give_points: {
            cdp_repayment: cdpRepayment,
            lq_claims: lqClaims,
            sp_claims: spClaims,
            vote
          }
        })),
        funds: _funds
      })
    };
  };
  liquidate = ({
    positionId,
    positionOwner
  }: {
    positionId: Uint128;
    positionOwner: string;
  }, _funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          liquidate: {
            position_id: positionId,
            position_owner: positionOwner
          }
        })),
        funds: _funds
      })
    };
  };
  claimMBRN = (_funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          claim_m_b_r_n: {}
        })),
        funds: _funds
      })
    };
  };
}