/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.35.7.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { UseQueryOptions, useQuery, useMutation, UseMutationOptions } from "@tanstack/react-query";
import { ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { StdFee, Coin } from "@cosmjs/amino";
import { AssetInfo, Addr, Uint128, Decimal, AssetResponse, AssetOracleInfo, PoolInfo, LPAssetInfo, TWAPPoolInfo, Identifier, Config, ExecuteMsg, InstantiateMsg, PriceResponse, PriceInfo, QueryMsg } from "./Oracle.types";
import { OracleQueryClient, OracleClient } from "./Oracle.client";
export const oracleQueryKeys = {
  contract: ([{
    contract: "oracle"
  }] as const),
  address: (contractAddress: string | undefined) => ([{ ...oracleQueryKeys.contract[0],
    address: contractAddress
  }] as const),
  config: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{ ...oracleQueryKeys.address(contractAddress)[0],
    method: "config",
    args
  }] as const),
  price: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{ ...oracleQueryKeys.address(contractAddress)[0],
    method: "price",
    args
  }] as const),
  prices: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{ ...oracleQueryKeys.address(contractAddress)[0],
    method: "prices",
    args
  }] as const),
  assets: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{ ...oracleQueryKeys.address(contractAddress)[0],
    method: "assets",
    args
  }] as const)
};
export const oracleQueries = {
  config: <TData = ConfigResponse,>({
    client,
    options
  }: OracleConfigQuery<TData>): UseQueryOptions<ConfigResponse, Error, TData> => ({
    queryKey: oracleQueryKeys.config(client?.contractAddress),
    queryFn: () => client ? client.config() : Promise.reject(new Error("Invalid client")),
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  }),
  price: <TData = PriceResponse,>({
    client,
    args,
    options
  }: OraclePriceQuery<TData>): UseQueryOptions<PriceResponse, Error, TData> => ({
    queryKey: oracleQueryKeys.price(client?.contractAddress, args),
    queryFn: () => client ? client.price({
      assetInfo: args.assetInfo,
      basketId: args.basketId,
      oracleTimeLimit: args.oracleTimeLimit,
      twapTimeframe: args.twapTimeframe
    }) : Promise.reject(new Error("Invalid client")),
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  }),
  prices: <TData = PricesResponse,>({
    client,
    args,
    options
  }: OraclePricesQuery<TData>): UseQueryOptions<PricesResponse, Error, TData> => ({
    queryKey: oracleQueryKeys.prices(client?.contractAddress, args),
    queryFn: () => client ? client.prices({
      assetInfos: args.assetInfos,
      oracleTimeLimit: args.oracleTimeLimit,
      twapTimeframe: args.twapTimeframe
    }) : Promise.reject(new Error("Invalid client")),
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  }),
  assets: <TData = AssetsResponse,>({
    client,
    args,
    options
  }: OracleAssetsQuery<TData>): UseQueryOptions<AssetsResponse, Error, TData> => ({
    queryKey: oracleQueryKeys.assets(client?.contractAddress, args),
    queryFn: () => client ? client.assets({
      assetInfos: args.assetInfos
    }) : Promise.reject(new Error("Invalid client")),
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  })
};
export interface OracleReactQuery<TResponse, TData = TResponse> {
  client: OracleQueryClient | undefined;
  options?: Omit<UseQueryOptions<TResponse, Error, TData>, "'queryKey' | 'queryFn' | 'initialData'"> & {
    initialData?: undefined;
  };
}
export interface OracleAssetsQuery<TData> extends OracleReactQuery<AssetsResponse, TData> {
  args: {
    assetInfos: AssetInfo[];
  };
}
export function useOracleAssetsQuery<TData = AssetsResponse>({
  client,
  args,
  options
}: OracleAssetsQuery<TData>) {
  return useQuery<AssetsResponse, Error, TData>(oracleQueryKeys.assets(client?.contractAddress, args), () => client ? client.assets({
    assetInfos: args.assetInfos
  }) : Promise.reject(new Error("Invalid client")), { ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface OraclePricesQuery<TData> extends OracleReactQuery<PricesResponse, TData> {
  args: {
    assetInfos: AssetInfo[];
    oracleTimeLimit: number;
    twapTimeframe: number;
  };
}
export function useOraclePricesQuery<TData = PricesResponse>({
  client,
  args,
  options
}: OraclePricesQuery<TData>) {
  return useQuery<PricesResponse, Error, TData>(oracleQueryKeys.prices(client?.contractAddress, args), () => client ? client.prices({
    assetInfos: args.assetInfos,
    oracleTimeLimit: args.oracleTimeLimit,
    twapTimeframe: args.twapTimeframe
  }) : Promise.reject(new Error("Invalid client")), { ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface OraclePriceQuery<TData> extends OracleReactQuery<PriceResponse, TData> {
  args: {
    assetInfo: AssetInfo;
    basketId?: Uint128;
    oracleTimeLimit: number;
    twapTimeframe: number;
  };
}
export function useOraclePriceQuery<TData = PriceResponse>({
  client,
  args,
  options
}: OraclePriceQuery<TData>) {
  return useQuery<PriceResponse, Error, TData>(oracleQueryKeys.price(client?.contractAddress, args), () => client ? client.price({
    assetInfo: args.assetInfo,
    basketId: args.basketId,
    oracleTimeLimit: args.oracleTimeLimit,
    twapTimeframe: args.twapTimeframe
  }) : Promise.reject(new Error("Invalid client")), { ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface OracleConfigQuery<TData> extends OracleReactQuery<ConfigResponse, TData> {}
export function useOracleConfigQuery<TData = ConfigResponse>({
  client,
  options
}: OracleConfigQuery<TData>) {
  return useQuery<ConfigResponse, Error, TData>(oracleQueryKeys.config(client?.contractAddress), () => client ? client.config() : Promise.reject(new Error("Invalid client")), { ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface OracleEditAssetMutation {
  client: OracleClient;
  msg: {
    assetInfo: AssetInfo;
    oracleInfo?: AssetOracleInfo;
    remove: boolean;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useOracleEditAssetMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, OracleEditAssetMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, OracleEditAssetMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.editAsset(msg, fee, memo, funds), options);
}
export interface OracleAddAssetMutation {
  client: OracleClient;
  msg: {
    assetInfo: AssetInfo;
    oracleInfo: AssetOracleInfo;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useOracleAddAssetMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, OracleAddAssetMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, OracleAddAssetMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.addAsset(msg, fee, memo, funds), options);
}
export interface OracleUpdateConfigMutation {
  client: OracleClient;
  msg: {
    osmoUsdPythFeedId?: Identifier;
    osmosisProxyContract?: string;
    owner?: string;
    poolsForUsdParTwap?: TWAPPoolInfo[];
    positionsContract?: string;
    pythOsmosisAddress?: string;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useOracleUpdateConfigMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, OracleUpdateConfigMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, OracleUpdateConfigMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.updateConfig(msg, fee, memo, funds), options);
}