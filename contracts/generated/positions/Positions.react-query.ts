/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.35.7.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { UseQueryOptions, useQuery, useMutation, UseMutationOptions } from "@tanstack/react-query";
import { ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { StdFee, Coin } from "@cosmjs/amino";
import { Decimal, Uint128, AssetInfo, Addr, BasketPositionsResponse, PositionResponse, CAsset, Asset, PoolInfo, LPAssetInfo, Basket, SupplyCap, PriceResponse, PriceInfo, Rate, MultiAssetSupplyCap, CollateralInterestResponse, Config, DebtCap, ExecuteMsg, PoolType, CallbackMsg, UpdateConfig, EditBasket, TWAPPoolInfo, InstantiateMsg, CreateBasket, InterestResponse, QueryMsg, UserInfo, RedeemabilityResponse, PremiumInfo, RedemptionInfo, PositionRedemption } from "./Positions.types";
import { PositionsQueryClient, PositionsClient } from "./Positions.client";
export const positionsQueryKeys = {
  contract: ([{
    contract: "positions"
  }] as const),
  address: (contractAddress: string | undefined) => ([{ ...positionsQueryKeys.contract[0],
    address: contractAddress
  }] as const),
  config: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{ ...positionsQueryKeys.address(contractAddress)[0],
    method: "config",
    args
  }] as const),
  getBasketRedeemability: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{ ...positionsQueryKeys.address(contractAddress)[0],
    method: "get_basket_redeemability",
    args
  }] as const),
  getBasketPositions: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{ ...positionsQueryKeys.address(contractAddress)[0],
    method: "get_basket_positions",
    args
  }] as const),
  getBasket: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{ ...positionsQueryKeys.address(contractAddress)[0],
    method: "get_basket",
    args
  }] as const),
  getBasketDebtCaps: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{ ...positionsQueryKeys.address(contractAddress)[0],
    method: "get_basket_debt_caps",
    args
  }] as const),
  getCreditRate: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{ ...positionsQueryKeys.address(contractAddress)[0],
    method: "get_credit_rate",
    args
  }] as const),
  getCollateralInterest: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{ ...positionsQueryKeys.address(contractAddress)[0],
    method: "get_collateral_interest",
    args
  }] as const)
};
export const positionsQueries = {
  config: <TData = ConfigResponse,>({
    client,
    options
  }: PositionsConfigQuery<TData>): UseQueryOptions<ConfigResponse, Error, TData> => ({
    queryKey: positionsQueryKeys.config(client?.contractAddress),
    queryFn: () => client ? client.config() : Promise.reject(new Error("Invalid client")),
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  }),
  getBasketRedeemability: <TData = GetBasketRedeemabilityResponse,>({
    client,
    args,
    options
  }: PositionsGetBasketRedeemabilityQuery<TData>): UseQueryOptions<GetBasketRedeemabilityResponse, Error, TData> => ({
    queryKey: positionsQueryKeys.getBasketRedeemability(client?.contractAddress, args),
    queryFn: () => client ? client.getBasketRedeemability({
      limit: args.limit,
      positionOwner: args.positionOwner,
      startAfter: args.startAfter
    }) : Promise.reject(new Error("Invalid client")),
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  }),
  getBasketPositions: <TData = GetBasketPositionsResponse,>({
    client,
    args,
    options
  }: PositionsGetBasketPositionsQuery<TData>): UseQueryOptions<GetBasketPositionsResponse, Error, TData> => ({
    queryKey: positionsQueryKeys.getBasketPositions(client?.contractAddress, args),
    queryFn: () => client ? client.getBasketPositions({
      limit: args.limit,
      startAfter: args.startAfter,
      user: args.user,
      userInfo: args.userInfo
    }) : Promise.reject(new Error("Invalid client")),
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  }),
  getBasket: <TData = GetBasketResponse,>({
    client,
    options
  }: PositionsGetBasketQuery<TData>): UseQueryOptions<GetBasketResponse, Error, TData> => ({
    queryKey: positionsQueryKeys.getBasket(client?.contractAddress),
    queryFn: () => client ? client.getBasket() : Promise.reject(new Error("Invalid client")),
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  }),
  getBasketDebtCaps: <TData = GetBasketDebtCapsResponse,>({
    client,
    options
  }: PositionsGetBasketDebtCapsQuery<TData>): UseQueryOptions<GetBasketDebtCapsResponse, Error, TData> => ({
    queryKey: positionsQueryKeys.getBasketDebtCaps(client?.contractAddress),
    queryFn: () => client ? client.getBasketDebtCaps() : Promise.reject(new Error("Invalid client")),
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  }),
  getCreditRate: <TData = GetCreditRateResponse,>({
    client,
    options
  }: PositionsGetCreditRateQuery<TData>): UseQueryOptions<GetCreditRateResponse, Error, TData> => ({
    queryKey: positionsQueryKeys.getCreditRate(client?.contractAddress),
    queryFn: () => client ? client.getCreditRate() : Promise.reject(new Error("Invalid client")),
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  }),
  getCollateralInterest: <TData = GetCollateralInterestResponse,>({
    client,
    options
  }: PositionsGetCollateralInterestQuery<TData>): UseQueryOptions<GetCollateralInterestResponse, Error, TData> => ({
    queryKey: positionsQueryKeys.getCollateralInterest(client?.contractAddress),
    queryFn: () => client ? client.getCollateralInterest() : Promise.reject(new Error("Invalid client")),
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  })
};
export interface PositionsReactQuery<TResponse, TData = TResponse> {
  client: PositionsQueryClient | undefined;
  options?: Omit<UseQueryOptions<TResponse, Error, TData>, "'queryKey' | 'queryFn' | 'initialData'"> & {
    initialData?: undefined;
  };
}
export interface PositionsGetCollateralInterestQuery<TData> extends PositionsReactQuery<GetCollateralInterestResponse, TData> {}
export function usePositionsGetCollateralInterestQuery<TData = GetCollateralInterestResponse>({
  client,
  options
}: PositionsGetCollateralInterestQuery<TData>) {
  return useQuery<GetCollateralInterestResponse, Error, TData>(positionsQueryKeys.getCollateralInterest(client?.contractAddress), () => client ? client.getCollateralInterest() : Promise.reject(new Error("Invalid client")), { ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface PositionsGetCreditRateQuery<TData> extends PositionsReactQuery<GetCreditRateResponse, TData> {}
export function usePositionsGetCreditRateQuery<TData = GetCreditRateResponse>({
  client,
  options
}: PositionsGetCreditRateQuery<TData>) {
  return useQuery<GetCreditRateResponse, Error, TData>(positionsQueryKeys.getCreditRate(client?.contractAddress), () => client ? client.getCreditRate() : Promise.reject(new Error("Invalid client")), { ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface PositionsGetBasketDebtCapsQuery<TData> extends PositionsReactQuery<GetBasketDebtCapsResponse, TData> {}
export function usePositionsGetBasketDebtCapsQuery<TData = GetBasketDebtCapsResponse>({
  client,
  options
}: PositionsGetBasketDebtCapsQuery<TData>) {
  return useQuery<GetBasketDebtCapsResponse, Error, TData>(positionsQueryKeys.getBasketDebtCaps(client?.contractAddress), () => client ? client.getBasketDebtCaps() : Promise.reject(new Error("Invalid client")), { ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface PositionsGetBasketQuery<TData> extends PositionsReactQuery<GetBasketResponse, TData> {}
export function usePositionsGetBasketQuery<TData = GetBasketResponse>({
  client,
  options
}: PositionsGetBasketQuery<TData>) {
  return useQuery<GetBasketResponse, Error, TData>(positionsQueryKeys.getBasket(client?.contractAddress), () => client ? client.getBasket() : Promise.reject(new Error("Invalid client")), { ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface PositionsGetBasketPositionsQuery<TData> extends PositionsReactQuery<GetBasketPositionsResponse, TData> {
  args: {
    limit?: number;
    startAfter?: string;
    user?: string;
    userInfo?: UserInfo;
  };
}
export function usePositionsGetBasketPositionsQuery<TData = GetBasketPositionsResponse>({
  client,
  args,
  options
}: PositionsGetBasketPositionsQuery<TData>) {
  return useQuery<GetBasketPositionsResponse, Error, TData>(positionsQueryKeys.getBasketPositions(client?.contractAddress, args), () => client ? client.getBasketPositions({
    limit: args.limit,
    startAfter: args.startAfter,
    user: args.user,
    userInfo: args.userInfo
  }) : Promise.reject(new Error("Invalid client")), { ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface PositionsGetBasketRedeemabilityQuery<TData> extends PositionsReactQuery<GetBasketRedeemabilityResponse, TData> {
  args: {
    limit?: number;
    positionOwner?: string;
    startAfter?: number;
  };
}
export function usePositionsGetBasketRedeemabilityQuery<TData = GetBasketRedeemabilityResponse>({
  client,
  args,
  options
}: PositionsGetBasketRedeemabilityQuery<TData>) {
  return useQuery<GetBasketRedeemabilityResponse, Error, TData>(positionsQueryKeys.getBasketRedeemability(client?.contractAddress, args), () => client ? client.getBasketRedeemability({
    limit: args.limit,
    positionOwner: args.positionOwner,
    startAfter: args.startAfter
  }) : Promise.reject(new Error("Invalid client")), { ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface PositionsConfigQuery<TData> extends PositionsReactQuery<ConfigResponse, TData> {}
export function usePositionsConfigQuery<TData = ConfigResponse>({
  client,
  options
}: PositionsConfigQuery<TData>) {
  return useQuery<ConfigResponse, Error, TData>(positionsQueryKeys.config(client?.contractAddress), () => client ? client.config() : Promise.reject(new Error("Invalid client")), { ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface PositionsCallbackMutation {
  client: PositionsClient;
  msg: CallbackMsg;
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function usePositionsCallbackMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, PositionsCallbackMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, PositionsCallbackMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.callback(msg, fee, memo, funds), options);
}
export interface PositionsEditcAssetMutation {
  client: PositionsClient;
  msg: {
    asset: AssetInfo;
    maxLTV?: Decimal;
    maxBorrowLTV?: Decimal;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function usePositionsEditcAssetMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, PositionsEditcAssetMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, PositionsEditcAssetMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.editcAsset(msg, fee, memo, funds), options);
}
export interface PositionsEditBasketMutation {
  client: PositionsClient;
  msg: {
    addedCAsset?: cAsset;
    baseInterestRate?: Decimal;
    collateralSupplyCaps?: SupplyCap[];
    cpcMarginOfError?: Decimal;
    creditAssetTwapPriceSource?: TWAPPoolInfo;
    creditPoolInfos?: PoolType[];
    frozen?: boolean;
    liqQueue?: string;
    multiAssetSupplyCaps?: MultiAssetSupplyCap[];
    negativeRates?: boolean;
    revToStakers?: boolean;
    takeRevenue?: Uint128;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function usePositionsEditBasketMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, PositionsEditBasketMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, PositionsEditBasketMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.editBasket(msg, fee, memo, funds), options);
}
export interface PositionsAccrueMutation {
  client: PositionsClient;
  msg: {
    positionIds: Uint128[];
    positionOwner?: string;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function usePositionsAccrueMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, PositionsAccrueMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, PositionsAccrueMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.accrue(msg, fee, memo, funds), options);
}
export interface PositionsEditRedeemabilityMutation {
  client: PositionsClient;
  msg: {
    maxLoanRepayment?: Decimal;
    positionIds: Uint128[];
    premium?: number;
    redeemable?: boolean;
    restrictedCollateralAssets?: string[];
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function usePositionsEditRedeemabilityMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, PositionsEditRedeemabilityMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, PositionsEditRedeemabilityMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.editRedeemability(msg, fee, memo, funds), options);
}
export interface PositionsRedeemCollateralMutation {
  client: PositionsClient;
  msg: {
    maxCollateralPremium?: number;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function usePositionsRedeemCollateralMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, PositionsRedeemCollateralMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, PositionsRedeemCollateralMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.redeemCollateral(msg, fee, memo, funds), options);
}
export interface PositionsLiquidateMutation {
  client: PositionsClient;
  msg: {
    positionId: Uint128;
    positionOwner: string;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function usePositionsLiquidateMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, PositionsLiquidateMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, PositionsLiquidateMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.liquidate(msg, fee, memo, funds), options);
}
export interface PositionsLiqRepayMutation {
  client: PositionsClient;
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function usePositionsLiqRepayMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, PositionsLiqRepayMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, PositionsLiqRepayMutation>(({
    client,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.liqRepay(fee, memo, funds), options);
}
export interface PositionsRepayMutation {
  client: PositionsClient;
  msg: {
    positionId: Uint128;
    positionOwner?: string;
    sendExcessTo?: string;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function usePositionsRepayMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, PositionsRepayMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, PositionsRepayMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.repay(msg, fee, memo, funds), options);
}
export interface PositionsWithdrawMutation {
  client: PositionsClient;
  msg: {
    assets: Asset[];
    positionId: Uint128;
    sendTo?: string;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function usePositionsWithdrawMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, PositionsWithdrawMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, PositionsWithdrawMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.withdraw(msg, fee, memo, funds), options);
}
export interface PositionsIncreaseDebtMutation {
  client: PositionsClient;
  msg: {
    ltv?: Decimal;
    amount?: Uint128;
    mintToAddr?: string;
    positionId: Uint128;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function usePositionsIncreaseDebtMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, PositionsIncreaseDebtMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, PositionsIncreaseDebtMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.increaseDebt(msg, fee, memo, funds), options);
}
export interface PositionsDepositMutation {
  client: PositionsClient;
  msg: {
    positionId?: Uint128;
    positionOwner?: string;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function usePositionsDepositMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, PositionsDepositMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, PositionsDepositMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.deposit(msg, fee, memo, funds), options);
}
export interface PositionsUpdateConfigMutation {
  client: PositionsClient;
  msg: {
    baseDebtCapMultiplier?: Uint128;
    collateralTwapTimeframe?: number;
    cpcMultiplier?: Decimal;
    creditTwapTimeframe?: number;
    debtAuction?: string;
    debtMinimum?: Uint128;
    dexRouter?: string;
    discountsContract?: string;
    liqFee?: Decimal;
    liquidityContract?: string;
    oracleContract?: string;
    oracleTimeLimit?: number;
    osmosisProxy?: string;
    owner?: string;
    rateSlopeMultiplier?: Decimal;
    stabilityPool?: string;
    stakingContract?: string;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function usePositionsUpdateConfigMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, PositionsUpdateConfigMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, PositionsUpdateConfigMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.updateConfig(msg, fee, memo, funds), options);
}