/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.35.7.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { UseQueryOptions, useQuery, useMutation, UseMutationOptions } from "@tanstack/react-query";
import { ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { StdFee } from "@cosmjs/amino";
import { Uint128, AllocationResponse, VestingPeriod, Addr, Config, ExecuteMsg, CosmosMsgForEmpty, BankMsg, StakingMsg, DistributionMsg, Binary, IbcMsg, Timestamp, Uint64, WasmMsg, GovMsg, VoteOption, ProposalVoteOption, ProposalMessage, Coin, Empty, IbcTimeout, IbcTimeoutBlock, InstantiateMsg, QueryMsg, AssetInfo, RecipientResponse, Allocation, Asset, RecipientsResponse, UnlockedResponse } from "./Vesting.types";
import { VestingQueryClient, VestingClient } from "./Vesting.client";
export const vestingQueryKeys = {
  contract: ([{
    contract: "vesting"
  }] as const),
  address: (contractAddress: string | undefined) => ([{ ...vestingQueryKeys.contract[0],
    address: contractAddress
  }] as const),
  config: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{ ...vestingQueryKeys.address(contractAddress)[0],
    method: "config",
    args
  }] as const),
  allocation: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{ ...vestingQueryKeys.address(contractAddress)[0],
    method: "allocation",
    args
  }] as const),
  unlockedTokens: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{ ...vestingQueryKeys.address(contractAddress)[0],
    method: "unlocked_tokens",
    args
  }] as const),
  recipient: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{ ...vestingQueryKeys.address(contractAddress)[0],
    method: "recipient",
    args
  }] as const),
  recipients: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{ ...vestingQueryKeys.address(contractAddress)[0],
    method: "recipients",
    args
  }] as const)
};
export const vestingQueries = {
  config: <TData = ConfigResponse,>({
    client,
    options
  }: VestingConfigQuery<TData>): UseQueryOptions<ConfigResponse, Error, TData> => ({
    queryKey: vestingQueryKeys.config(client?.contractAddress),
    queryFn: () => client ? client.config() : Promise.reject(new Error("Invalid client")),
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  }),
  allocation: <TData = AllocationResponse,>({
    client,
    args,
    options
  }: VestingAllocationQuery<TData>): UseQueryOptions<AllocationResponse, Error, TData> => ({
    queryKey: vestingQueryKeys.allocation(client?.contractAddress, args),
    queryFn: () => client ? client.allocation({
      recipient: args.recipient
    }) : Promise.reject(new Error("Invalid client")),
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  }),
  unlockedTokens: <TData = UnlockedTokensResponse,>({
    client,
    args,
    options
  }: VestingUnlockedTokensQuery<TData>): UseQueryOptions<UnlockedTokensResponse, Error, TData> => ({
    queryKey: vestingQueryKeys.unlockedTokens(client?.contractAddress, args),
    queryFn: () => client ? client.unlockedTokens({
      recipient: args.recipient
    }) : Promise.reject(new Error("Invalid client")),
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  }),
  recipient: <TData = RecipientResponse,>({
    client,
    args,
    options
  }: VestingRecipientQuery<TData>): UseQueryOptions<RecipientResponse, Error, TData> => ({
    queryKey: vestingQueryKeys.recipient(client?.contractAddress, args),
    queryFn: () => client ? client.recipient({
      recipient: args.recipient
    }) : Promise.reject(new Error("Invalid client")),
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  }),
  recipients: <TData = RecipientsResponse,>({
    client,
    options
  }: VestingRecipientsQuery<TData>): UseQueryOptions<RecipientsResponse, Error, TData> => ({
    queryKey: vestingQueryKeys.recipients(client?.contractAddress),
    queryFn: () => client ? client.recipients() : Promise.reject(new Error("Invalid client")),
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  })
};
export interface VestingReactQuery<TResponse, TData = TResponse> {
  client: VestingQueryClient | undefined;
  options?: Omit<UseQueryOptions<TResponse, Error, TData>, "'queryKey' | 'queryFn' | 'initialData'"> & {
    initialData?: undefined;
  };
}
export interface VestingRecipientsQuery<TData> extends VestingReactQuery<RecipientsResponse, TData> {}
export function useVestingRecipientsQuery<TData = RecipientsResponse>({
  client,
  options
}: VestingRecipientsQuery<TData>) {
  return useQuery<RecipientsResponse, Error, TData>(vestingQueryKeys.recipients(client?.contractAddress), () => client ? client.recipients() : Promise.reject(new Error("Invalid client")), { ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface VestingRecipientQuery<TData> extends VestingReactQuery<RecipientResponse, TData> {
  args: {
    recipient: string;
  };
}
export function useVestingRecipientQuery<TData = RecipientResponse>({
  client,
  args,
  options
}: VestingRecipientQuery<TData>) {
  return useQuery<RecipientResponse, Error, TData>(vestingQueryKeys.recipient(client?.contractAddress, args), () => client ? client.recipient({
    recipient: args.recipient
  }) : Promise.reject(new Error("Invalid client")), { ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface VestingUnlockedTokensQuery<TData> extends VestingReactQuery<UnlockedTokensResponse, TData> {
  args: {
    recipient: string;
  };
}
export function useVestingUnlockedTokensQuery<TData = UnlockedTokensResponse>({
  client,
  args,
  options
}: VestingUnlockedTokensQuery<TData>) {
  return useQuery<UnlockedTokensResponse, Error, TData>(vestingQueryKeys.unlockedTokens(client?.contractAddress, args), () => client ? client.unlockedTokens({
    recipient: args.recipient
  }) : Promise.reject(new Error("Invalid client")), { ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface VestingAllocationQuery<TData> extends VestingReactQuery<AllocationResponse, TData> {
  args: {
    recipient: string;
  };
}
export function useVestingAllocationQuery<TData = AllocationResponse>({
  client,
  args,
  options
}: VestingAllocationQuery<TData>) {
  return useQuery<AllocationResponse, Error, TData>(vestingQueryKeys.allocation(client?.contractAddress, args), () => client ? client.allocation({
    recipient: args.recipient
  }) : Promise.reject(new Error("Invalid client")), { ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface VestingConfigQuery<TData> extends VestingReactQuery<ConfigResponse, TData> {}
export function useVestingConfigQuery<TData = ConfigResponse>({
  client,
  options
}: VestingConfigQuery<TData>) {
  return useQuery<ConfigResponse, Error, TData>(vestingQueryKeys.config(client?.contractAddress), () => client ? client.config() : Promise.reject(new Error("Invalid client")), { ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface VestingUpdateConfigMutation {
  client: VestingClient;
  msg: {
    additionalAllocation?: Uint128;
    mbrnDenom?: string;
    osmosisProxy?: string;
    owner?: string;
    stakingContract?: string;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useVestingUpdateConfigMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, VestingUpdateConfigMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, VestingUpdateConfigMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.updateConfig(msg, fee, memo, funds), options);
}
export interface VestingCastVoteMutation {
  client: VestingClient;
  msg: {
    proposalId: number;
    vote: ProposalVoteOption;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useVestingCastVoteMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, VestingCastVoteMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, VestingCastVoteMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.castVote(msg, fee, memo, funds), options);
}
export interface VestingSubmitProposalMutation {
  client: VestingClient;
  msg: {
    description: string;
    expedited: boolean;
    link?: string;
    messages?: ProposalMessage[];
    title: string;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useVestingSubmitProposalMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, VestingSubmitProposalMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, VestingSubmitProposalMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.submitProposal(msg, fee, memo, funds), options);
}
export interface VestingClaimFeesforRecipientMutation {
  client: VestingClient;
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useVestingClaimFeesforRecipientMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, VestingClaimFeesforRecipientMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, VestingClaimFeesforRecipientMutation>(({
    client,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.claimFeesforRecipient(fee, memo, funds), options);
}
export interface VestingClaimFeesforContractMutation {
  client: VestingClient;
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useVestingClaimFeesforContractMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, VestingClaimFeesforContractMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, VestingClaimFeesforContractMutation>(({
    client,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.claimFeesforContract(fee, memo, funds), options);
}
export interface VestingWithdrawUnlockedMutation {
  client: VestingClient;
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useVestingWithdrawUnlockedMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, VestingWithdrawUnlockedMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, VestingWithdrawUnlockedMutation>(({
    client,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.withdrawUnlocked(fee, memo, funds), options);
}
export interface VestingAddAllocationMutation {
  client: VestingClient;
  msg: {
    allocation: Uint128;
    recipient: string;
    vestingPeriod?: VestingPeriod;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useVestingAddAllocationMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, VestingAddAllocationMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, VestingAddAllocationMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.addAllocation(msg, fee, memo, funds), options);
}
export interface VestingRemoveRecipientMutation {
  client: VestingClient;
  msg: {
    recipient: string;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useVestingRemoveRecipientMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, VestingRemoveRecipientMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, VestingRemoveRecipientMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.removeRecipient(msg, fee, memo, funds), options);
}
export interface VestingAddRecipientMutation {
  client: VestingClient;
  msg: {
    recipient: string;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useVestingAddRecipientMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, VestingAddRecipientMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, VestingAddRecipientMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.addRecipient(msg, fee, memo, funds), options);
}