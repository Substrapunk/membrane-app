{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "ExecuteMsg",
  "oneOf": [
    {
      "description": "Start or add to ongoing auction. Callable by the owner (MBRN Governance) or Positions contract.",
      "type": "object",
      "required": [
        "start_auction"
      ],
      "properties": {
        "start_auction": {
          "type": "object",
          "required": [
            "auction_asset"
          ],
          "properties": {
            "auction_asset": {
              "description": "If CDT, recapitalize bad debt If not, use auction to sell fees for a desired asset",
              "allOf": [
                {
                  "$ref": "#/definitions/Asset"
                }
              ]
            },
            "repayment_position_info": {
              "description": "Use auction to repay a position",
              "anyOf": [
                {
                  "$ref": "#/definitions/UserInfo"
                },
                {
                  "type": "null"
                }
              ]
            },
            "send_to": {
              "description": "Use auction to buy CDT to send somewhere",
              "type": [
                "string",
                "null"
              ]
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Swap for discounted MBRN in any open CDT debt auction",
      "type": "object",
      "required": [
        "swap_for_m_b_r_n"
      ],
      "properties": {
        "swap_for_m_b_r_n": {
          "type": "object",
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Swap for discounted fees with the configuration's desired asset",
      "type": "object",
      "required": [
        "swap_for_fee"
      ],
      "properties": {
        "swap_for_fee": {
          "type": "object",
          "required": [
            "auction_asset"
          ],
          "properties": {
            "auction_asset": {
              "$ref": "#/definitions/AssetInfo"
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Remove ongoing CDT auction, primarily for mistakes",
      "type": "object",
      "required": [
        "remove_auction"
      ],
      "properties": {
        "remove_auction": {
          "type": "object",
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Update config",
      "type": "object",
      "required": [
        "update_config"
      ],
      "properties": {
        "update_config": {
          "$ref": "#/definitions/UpdateConfig"
        }
      },
      "additionalProperties": false
    }
  ],
  "definitions": {
    "Addr": {
      "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
      "type": "string"
    },
    "Asset": {
      "type": "object",
      "required": [
        "amount",
        "info"
      ],
      "properties": {
        "amount": {
          "description": "Amount",
          "allOf": [
            {
              "$ref": "#/definitions/Uint128"
            }
          ]
        },
        "info": {
          "description": "Asset info",
          "allOf": [
            {
              "$ref": "#/definitions/AssetInfo"
            }
          ]
        }
      },
      "additionalProperties": false
    },
    "AssetInfo": {
      "oneOf": [
        {
          "description": "Cw20 token",
          "type": "object",
          "required": [
            "token"
          ],
          "properties": {
            "token": {
              "type": "object",
              "required": [
                "address"
              ],
              "properties": {
                "address": {
                  "$ref": "#/definitions/Addr"
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Native token",
          "type": "object",
          "required": [
            "native_token"
          ],
          "properties": {
            "native_token": {
              "type": "object",
              "required": [
                "denom"
              ],
              "properties": {
                "denom": {
                  "type": "string"
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "Decimal": {
      "description": "A fixed-point decimal value with 18 fractional digits, i.e. Decimal(1_000_000_000_000_000_000) == 1.0\n\nThe greatest possible value that can be represented is 340282366920938463463.374607431768211455 (which is (2^128 - 1) / 10^18)",
      "type": "string"
    },
    "Uint128": {
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
      "type": "string"
    },
    "UpdateConfig": {
      "type": "object",
      "properties": {
        "cdt_denom": {
          "description": "CDT Denom",
          "type": [
            "string",
            "null"
          ]
        },
        "desired_asset": {
          "description": "Asset to be bought by FeeAuctions",
          "type": [
            "string",
            "null"
          ]
        },
        "discount_increase": {
          "description": "Increase in discount per unit of timeframe",
          "anyOf": [
            {
              "$ref": "#/definitions/Decimal"
            },
            {
              "type": "null"
            }
          ]
        },
        "discount_increase_timeframe": {
          "description": "Timeframe for increase of discount in seconds",
          "type": [
            "integer",
            "null"
          ],
          "format": "uint64",
          "minimum": 0.0
        },
        "governance_contract": {
          "description": "Address of the governance contract",
          "type": [
            "string",
            "null"
          ]
        },
        "initial_discount": {
          "description": "Initial discount for MBRN in auction",
          "anyOf": [
            {
              "$ref": "#/definitions/Decimal"
            },
            {
              "type": "null"
            }
          ]
        },
        "mbrn_denom": {
          "description": "MBRN Denom",
          "type": [
            "string",
            "null"
          ]
        },
        "oracle_contract": {
          "description": "Address of the oracle contract",
          "type": [
            "string",
            "null"
          ]
        },
        "osmosis_proxy": {
          "description": "Address of the osmosis proxy contract",
          "type": [
            "string",
            "null"
          ]
        },
        "owner": {
          "description": "Address of the owner",
          "type": [
            "string",
            "null"
          ]
        },
        "positions_contract": {
          "description": "Address of the positions contract",
          "type": [
            "string",
            "null"
          ]
        },
        "send_to_stakers": {
          "description": "Toggle sending FeeAuction assets to stakers instead of governance",
          "type": [
            "boolean",
            "null"
          ]
        },
        "staking_contract": {
          "description": "Address of the staking contract",
          "type": [
            "string",
            "null"
          ]
        },
        "twap_timeframe": {
          "description": "Timeframe for MBRN TWAP in minutes",
          "type": [
            "integer",
            "null"
          ],
          "format": "uint64",
          "minimum": 0.0
        }
      },
      "additionalProperties": false
    },
    "UserInfo": {
      "type": "object",
      "required": [
        "position_id",
        "position_owner"
      ],
      "properties": {
        "position_id": {
          "description": "Position ID",
          "allOf": [
            {
              "$ref": "#/definitions/Uint128"
            }
          ]
        },
        "position_owner": {
          "description": "Position owner",
          "type": "string"
        }
      },
      "additionalProperties": false
    }
  }
}
